use regex::Regex;
use std::{
    fs::File,
    io::{BufRead, BufReader, Error},
};

fn part_a(lines: &Vec<String>) -> usize {
    panic!("Not implemented yet.")
}

fn part_b(lines: &Vec<String>) -> usize {
    panic!("Not implemented yet.")
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_a() {
        let lines: Vec<String> = ["a", "b", "c"].into_iter().map(String::from).collect();
        assert_eq!(part_a(&lines), 1);
    }

    #[test]
    fn test_b() {
        let lines: Vec<String> = ["a", "b", "c"].into_iter().map(String::from).collect();
        assert_eq!(part_b(&lines), 1);
    }
}

fn main() -> Result<(), Error> {
    // Figure out which exercise we are so we can load the correct input file
    let pattern = Regex::new("[0-9]+$").unwrap();
    let name = &std::env::args().next().unwrap();
    let ex = pattern.find(name).unwrap().as_str();
    println!("Running code for Day {}.", ex);

    let file = File::open(format!("./data/day_{ex}_a.txt"))?;
    let lines: Vec<String> = BufReader::new(file).lines().map(|l| l.unwrap()).collect();

    println!("Part A result = {}", part_a(&lines));
    println!("Part B result = {}", part_b(&lines));

    Ok(())
}
